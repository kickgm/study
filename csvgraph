#*- encoding: utf-8 -*-
import pandas as pd
import re
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns 
import datetime
import matplotlib.font_manager as fm
import statsmodels.api as sm
import copy
import warnings 
import peakutils
import scipy.stats as stats
import os 
import logging
from tqdm import tqdm
from pandas.plotting import lag_plot
from statsmodels.stats.outliers_influence import variance_inflation_factor
from pandas.tseries.offsets import  Day, Hour, Minute, Second
from IPython.display import Image
from IPython.display import clear_output
from sklearn import preprocessing
from multiprocessing import Process, current_process,Queue
from threading import Thread
from time import sleep

plt.rcParams['xtick.color']='black'
plt.rcParams['ytick.color']='black'
matplotlib.rcParams['axes.unicode_minus'] = False
font_path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'
#font_path = 'c:\\/Windows\\Fonts\\NGULIM.TTF'
font_name = fm.FontProperties(fname=font_path) 
matplotlib.rc('font',family=font_name.get_name())
pd.set_option('mode.chained_assignment',  None) # <==== 경고를 끈다
warnings.filterwarnings("ignore")
plt.set_loglevel('WARNING')
pd.options.display.max_rows = 4999
pd.options.display.max_columns = 999


%load_ext autoreload
%autoreload 2

print('import : DONE')



df_3 = pd.read_csv( './result_null제거.csv',  sep=",", parse_dates =["시각"], index_col ="시각" ).dropna(axis=0)
# display( df_3 )


# df_5=df_3['2021-03-01 05:00:00':'2021-06-30 23:59:59'].copy()
df_5=df_3.copy()
plt.rcParams["figure.figsize"]=(32,2)

col_count = 4

k=0
for i,df in df_5.iteritems():
#     if 'HDJBE.LT' not in df.name : continue
    
    display( str(k) + ', ' + df.name )
    
    plt.subplot(1,col_count,1)
    plt.plot(df)
  




    
    plt.subplot(1,col_count,2)
    
    date_1=df.index.min()
    while True :
        date_11 = str(date_1.year) +'-'+str(date_1.month) +'-'+str(date_1.day)
        
        if date_1 > df.index.max() : break
            
        df_t = df[date_11:date_11].reset_index()
        del(df_t['시각'])
        plt.plot(df_t)
#         display(df_t)
        
        date_1 = date_1+datetime.timedelta(days=1)
        
    plt.subplot(1,col_count,3)

    df_5p = df_5.copy()
    df_5p['index'] = df_5p.index
    df_5p['hm'] = df_5p['index'].apply(lambda x: (x.hour*60) + x.minute )
    df_5p['month'] = df_5p['index'].apply(lambda x:x.month )
    df_1_12월__0_23시_key = df_5p.groupby(['month'])
    df_1_12월__0_23시 = df_5p.groupby(['month','hm']).mean()
    
#     display(df_1_12월__0_23시_key.groups.keys())
    
    for i in df_1_12월__0_23시_key.groups.keys():
        plt.plot(df_1_12월__0_23시.xs(i)[df.name],  linewidth = 1)
    
    
    
    
#     plt.subplot(1,3,2)
    df_range = df.value_counts().sort_index(ascending=False)
# #     display( a )
#     plt.plot(df_range)

    t = df_range.index.max()
    b = df_range.index.min()    
    
    display( '최대값(기본) : '+str(t) +', 최소값(기본) : ' + str(b) )
    c = -1
    p = 0
    df_median = df.median()
#     display(df[(3.74<=df) & (df<=3.75)])
    for df_f,j in df_range.iteritems():
        if df_f <= df_median : 
            c = p
            display('중간값' + str(df_median) +' -> 중간값 찾음 : '+ str(df_range.iloc[[c]].index.values[0] ) )
            break
        p += 1
    
    mul=10
    for j in range( p, df_range.count() ):
        if df_range.iloc[j]*mul < df_range.iloc[j-1] :
            display( '최저값 찾음 : ' + str(df_range.iloc[[j]].index.values[0] ) )
            b = df_range.iloc[[j]].index.values[0]
            break
    
    for j in range( p, 0, -1 ):
        if df_range.iloc[j]*mul < df_range.iloc[j+1] :
            display( '최대값 찾음 : ' + str(df_range.iloc[[j]].index.values[0] ) )
            t = df_range.iloc[[j]].index.values[0]
            break        

    plt.subplot(1,col_count,4)
    df_1=df[(b<=df) & (df<=t)] 
    plt.plot(df_1)
        
    plt.show()
    
        
    
#     if k ==0 :
#         a =pd.DataFrame([3.201856250 ,3.475100000 ,3.748343750 ,3.959268750 ,4.350512500 ,4.889993750 ,5.173193750 ,5.166187500 ,5.055562500 ,4.683125000 ,4.537837500 ,4.291512500 ,4.067312500 ,3.884781250 ,3.659106250 ,3.158343750 ,2.931931250 ,2.814668750 ,2.724325000 ,2.619600000 ,2.495700000 ,2.419000000 ,2.338612500 ,2.803237500 ])
#         plt.subplot(1,3,1)
#         plt.plot(a)
# #         df[(2<=df) & (df<=100)].plot()
#         plt.show()
    k+=1



